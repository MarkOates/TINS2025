properties:


  - name: font_bin
    type: AllegroFlare::FontBin*
    init_with: nullptr
    setter: before_initialized

  - name: camera_studio
    type: DialControl::CameraStudio
    init_with: '{}'
    getter_ref: true

  - name: motion_studio
    type: Timeline::MotionStudio
    init_with: '{}'
    getter_ref: true

  - name: control_state
    type: uint32_t
    init_with: STATE_UNDEF
    getter: true
    setter: explicit

  - name: control_state_is_busy
    type: bool
    init_with: false

  - name: control_state_changed_at
    type: float
    init_with: 0.0f

  - name: initialized
    type: bool
    init_with: false
    getter: true


enums:


  - name: ControlState
    enumerators:
      - STATE_UNDEF
      - STATE_CAMERA_STUDIO_CONTROL
      - STATE_MOTION_STUDIO_CONTROL


methods:


  - name: initialize
    guards: [ (!initialized), font_bin ]
    body: |
      camera_studio.set_font_bin(font_bin);
      camera_studio.initialize();

      // Camera A, for now
      build_parameters_for_camera_1();


      // Set the position of the timeline
      AllegroFlare::Placement2D &timeline_placement = motion_studio.get_timeline_placement_ref();
      timeline_placement.position.x = 400;
      timeline_placement.position.y = 900;

      set_control_state(STATE_CAMERA_STUDIO_CONTROL);


      //AllegroFlare::Placement3D placement;
      //Timeline::MotionStudio motion_studio;
      //AllegroFlare::Placement2D &timeline_placement = motion_studio.get_timeline_placement_ref();
      //timeline_placement.position.x = 300;
      //timeline_placement.position.y = 700;

      //MusicElements music_elements;
      //motion_studio.set_parameters(build_parameters_for_music_elements(music_elements));
      //motion_studio.set_parameters(build_parameters_for_placement3D(placement));
      //motion_studio.set_parameter_views(
            //build_parameter_views_for_parameters(
               //&get_font_bin_ref(),
               //&motion_studio.get_parameters_ref()
            //)
         //);
      initialized = true;
      return;
    body_dependency_symbols:
      - Timeline::ParameterMappings::AllegroFlare::Camera3D


  - name: build_parameters_for_camera_1
    body: |
      // TODO: Check if this is safe?

      AllegroFlare::Camera3D &camera_1 = *camera_studio.get_current_camera();

      //motion_studio.set_font_bin(font_bin);
      // HERE
      motion_studio.set_parameters(
         //build_parameters_for_placement3D(placement)
         Timeline::ParameterMappings::AllegroFlare::Camera3D::build_parameters(&camera_1)
      );
      //setup_parameter_views_for_parameters();
      motion_studio.set_parameter_views(
            motion_studio.build_parameter_views_for_parameters(
               font_bin,
               &motion_studio.get_parameters_ref(),
               12
            )
         );
      //motion_studio.set_parameter_views(
            //motion_studio.build_parameter_views_for_parameters(
               //font_bin,
               //&motion_studio.get_parameters_ref(),
               //12
            //)
         //);
      return;


  - name: link_camera_1_to_parameters
    body: |
      AllegroFlare::Camera3D &camera_1 = *camera_studio.get_current_camera();

      for (auto &p : motion_studio.get_parameters_ref())
      {
         if (p.name.empty()) throw std::runtime_error("unrecognized param \"" + p.name + "\"");

         else if (p.name == "near plane") p.parameter = &camera_1.near_plane;
         else if (p.name == "far plane") p.parameter = &camera_1.far_plane;

         else if (p.name == "position.x") p.parameter = &camera_1.position.x;
         else if (p.name == "position.y") p.parameter = &camera_1.position.y;
         else if (p.name == "position.z") p.parameter = &camera_1.position.z;

         else if (p.name == "stepout.x") p.parameter = &camera_1.stepout.x;
         else if (p.name == "stepout.y") p.parameter = &camera_1.stepout.y;
         else if (p.name == "stepout.z") p.parameter = &camera_1.stepout.z;

         else if (p.name == "shift.x") p.parameter = &camera_1.shift.x;
         else if (p.name == "shift.y") p.parameter = &camera_1.shift.y;

         else if (p.name == "spin") p.parameter = &camera_1.spin;
         else if (p.name == "tilt") p.parameter = &camera_1.tilt;
         else if (p.name == "roll") p.parameter = &camera_1.roll;

         else if (p.name == "zoom") p.parameter = &camera_1.zoom;

         else throw std::runtime_error("unaccounted for param \"" + p.name + "\"");
      }
      
      //setup_parameter_views_for_parameters();
      motion_studio.set_parameter_views(
            motion_studio.build_parameter_views_for_parameters(
               font_bin,
               &motion_studio.get_parameters_ref(),
               12
            )
         );

      return;


  - name: xxbuild_parameter_views_for_parameters
    type: std::vector<Timeline::ParameterView>
    parameters:
      - name: font_bin
        type: AllegroFlare::FontBin*
        default_argument: nullptr
      - name: p
        type: std::vector<Timeline::Parameter>*
        default_argument: nullptr
      - name: height
        type: float
        default_argument: Timeline::ParameterView::DEFAULT_HEIGHT
    body: |
       std::vector<Timeline::ParameterView> result;
       int x = 400;
       int y = 100;
       //int yd = 100;
       int i = 0;
       //float height = Timeline::ParameterView::DEFAULT_HEIGHT;
       //int yd = height;
       for (auto &pp : *p)
       {
          result.push_back(Timeline::ParameterView(font_bin, pp.name, &pp)); // HERE
          result.back().set_height(height);
          i++;
       }
       return result;


  - name: update
    guards: [ initialized ]
    body: |
      motion_studio.update_playback();
      camera_studio.update();
      return;


  - name: setup_camera_projection_on_live_camera
    guards: [ initialized ]
    body: |
      camera_studio.setup_projection_on_live_camera();
      return;


  - name: toggle_control_state
    body: |
      if (is_control_state(STATE_CAMERA_STUDIO_CONTROL)) set_control_state(STATE_MOTION_STUDIO_CONTROL);
      else if (is_control_state(STATE_MOTION_STUDIO_CONTROL)) set_control_state(STATE_CAMERA_STUDIO_CONTROL);
      return;


  - name: render_hud
    guards: [ initialized ]
    body: |
      camera_studio.setup_projection_on_hud_camera();
      camera_studio.draw_camera_info_overlay();
      motion_studio.render();
      DialControl::CameraInfoOverlay::draw_pill(
         1920/2 + 700, // x
         1080 - 80,    // y
         200,          // w
         48,           // h
         80.0,         // column_divider_pos
         8.0,          // column_divider_padding
         "Mode",       // label
         ALLEGRO_COLOR{1, 1, 1, 1}, // label_color
         get_control_state_string(control_state), // value
         ALLEGRO_COLOR{1, 1, 1, 1}, // value_color
         obtain_font(),
         obtain_bold_font()
      );
      return;
    body_dependency_symbols:
      - DialControl::CameraInfoOverlay


  - name: on_key_down
    parameters:
      - name: event
        type: ALLEGRO_EVENT*
        default_argument: nullptr
    guards: [ initialized ]
    body: |
      // TODO: Fix these paths
      std::string filename_load = "tests/fixtures/animations/camera_move_1-0n.txt";
      std::string filename_save = "tests/fixtures/animations/camera_move_1-0n_output.txt";

      if (event->keyboard.keycode == ALLEGRO_KEY_TAB)
      {
         toggle_control_state();
      }
      else if (event->keyboard.keycode == ALLEGRO_KEY_X)
      {
         std::cout << "saving json to " << filename_save << std::endl;
         std::string file_content = build_json_string();
         AllegroFlare::php::file_put_contents(filename_save, file_content);
      }
      else if (event->keyboard.keycode == ALLEGRO_KEY_L)
      {
         std::cout << "loading json" << std::endl;
         std::string file_content = AllegroFlare::php::file_get_contents(filename_load);
         load_json(file_content);
      }
      else
      {
         switch (control_state)
         {
            case STATE_CAMERA_STUDIO_CONTROL: camera_studio.on_key_down(event); break;
            case STATE_MOTION_STUDIO_CONTROL: motion_studio.on_key_down(event); break;
            default: break;
         }
      }
      return;
    body_dependency_symbols:
       - AllegroFlare::php


  - name: load_json
    parameters:
      - name: json_string
        type: std::string
        default_argument: '"[unset-json_string]"'
    body: |
      // 1) load the camera json
      camera_studio.load_json(json_string);

      motion_studio.load_json(json_string);

      link_camera_1_to_parameters();
      return;


  - name: build_json_string
    type: std::string
    body: |
      // 1) load the camera json
      auto cj = camera_studio.build_json();
      auto mj = motion_studio.build_json();
      //motion_studio.load_json(json_string);
      //link_camera_1_to_parameters();
      cj.update(mj);
      return cj.dump(2);


  - name: set_control_state
    parameters:
      - name: control_state
        type: uint32_t
        default_argument: STATE_UNDEF
      - name: override_if_busy
        type: bool
        default_argument: false
    guards: [ is_valid_control_state(control_state) ]
    body: |
      if (this->control_state == control_state) return;
      if (!override_if_busy && control_state_is_busy) return;
      uint32_t previous_control_state = this->control_state;

      switch (control_state)
      {
         case STATE_CAMERA_STUDIO_CONTROL:
         break;

         case STATE_MOTION_STUDIO_CONTROL:
         break;

         default:
            AllegroFlare::Logger::throw_error(
               THIS_CLASS_AND_METHOD_NAME,
               "Unable to handle case for control_state \"" + std::to_string(control_state) + "\""
            );
         break;
      }

      this->control_state = control_state;
      control_state_changed_at = al_get_time();

      return;
    body_dependency_symbols:
      - AllegroFlare::Logger


  - name: get_control_state_string
    type: std::string
    parameters:
      - name: control_state
        type: uint32_t
        default_argument: STATE_UNDEF
    guards: [ is_valid_control_state(control_state) ]
    body: |
      switch (control_state)
      {
         case STATE_CAMERA_STUDIO_CONTROL: return "Camera"; break;
         case STATE_MOTION_STUDIO_CONTROL: return "Motion"; break;

         default:
            AllegroFlare::Logger::throw_error(
               THIS_CLASS_AND_METHOD_NAME,
               "Unable to handle case for control_state \"" + std::to_string(control_state) + "\""
            );
         break;
      }
      return "[error-obtaining-value]";
    body_dependency_symbols:
      - AllegroFlare::Logger


  - name: is_valid_control_state
    type: bool
    static: true
    parameters:
      - name: control_state
        type: uint32_t
        default_argument: STATE_UNDEF
    body: |
      std::set<uint32_t> valid_control_states =
      {
         STATE_CAMERA_STUDIO_CONTROL,
         STATE_MOTION_STUDIO_CONTROL,
      };
      return (valid_control_states.count(control_state) > 0);
    body_dependency_symbols:
      - std::set


  - name: is_control_state
    type: bool
    parameters:
      - name: possible_control_state
        type: uint32_t
        default_argument: STATE_UNDEF
    body: |
     return (control_state == possible_control_state);


  - name: infer_current_control_state_age
    type: float
    parameters:
      - name: time_now
        type: float
        default_argument: al_get_time()
    body: |
      return (time_now - control_state_changed_at);


  - name: obtain_font
    private: true
    type: ALLEGRO_FONT*
    guards: [ font_bin ]
    body: |
      return font_bin->auto_get("Inter-Medium.ttf -26");


  - name: obtain_bold_font
    private: true
    type: ALLEGRO_FONT*
    guards: [ font_bin ]
    body: |
      return font_bin->auto_get("Inter-bold.ttf -26");


dependencies:


  - symbol: DialControl::CameraStudio
    headers: [ DialControl/CameraStudio.hpp ]
  - symbol: Timeline::MotionStudio
    headers: [ Timeline/MotionStudio.hpp ]
  - symbol: ALLEGRO_EVENT
    headers: [ allegro5/allegro.h ]
  - symbol: AllegroFlare::FontBin
    headers: [ AllegroFlare/FontBin.hpp ]
  - symbol: Timeline::ParameterMappings::AllegroFlare::Camera3D
    headers: [ Timeline/ParameterMappings/AllegroFlare/Camera3D.hpp ]
  - symbol: Timeline::Parameter
    headers: [ Timeline/Parameter.hpp ]
  - symbol: Timeline::ParameterView
    headers: [ Timeline/ParameterView.hpp ]
  - symbol: AllegroFlare::Logger
    headers: [ AllegroFlare/Logger.hpp ]
  - symbol: ALLEGRO_FONT
    headers: [ allegro5/allegro_font.h ]
  - symbol: DialControl::CameraInfoOverlay
    headers: [ DialControl/CameraInfoOverlay.hpp ]
  - symbol: AllegroFlare::php
    headers: [ AllegroFlare/UsefulPHP.hpp ]


