properties:


  - name: parameters
    type: std::vector<Timeline::Parameter>
    init_with: '{}'
    getter: true
    getter_ref: true
    setter: true

  - name: parameter_views
    type: std::vector<Timeline::ParameterView>
    init_with: '{}'
    getter: true
    getter_ref: true
    setter: true

  - name: parameter_view_idx
    type: int
    init_with: 0
    getter: true
    getter_ref: true
    setter: true

  - name: wrap_parameter_view_idx_change
    type: bool
    init_with: true
    getter: true
    getter_ref: true
    setter: true

  - name: timeline_placement
    type: AllegroFlare::Placement2D
    init_with: '{}'
    getter: true
    getter_ref: true
    setter: true

  - name: playback_speed
    type: float
    init_with: 1.0f / 60.0f
    getter: true
    getter_ref: true
    setter: true

  - name: playhead
    type: float
    init_with: 0.0f
    getter: true
    getter_ref: true
    setter: true

  - name: playhead_max
    type: float
    init_with: 120.0f
    getter: true
    getter_ref: true
    setter: true

  - name: playhead_movement_fine
    type: float
    init_with: 1.0 / 60
    getter: true
    getter_ref: true
    setter: true

  - name: playhead_movement_macro
    type: float
    init_with: 1.0 / 60 * 30
    getter: true
    getter_ref: true
    setter: true

  - name: playing
    type: bool
    init_with: false
    getter: true
    getter_ref: true
    setter: true

  - name: timeline_start_position
    type: float
    init_with: 0.0
    getter: true
    setter: true

  - name: timeline_time_scale
    type: float
    init_with: 1.0
    getter: true
    setter: true

  - name: timeline_overlay_visible
    type: bool
    init_with: true


methods:


  - name: render
    body: |
      if (timeline_overlay_visible)
      {
         timeline_placement.start_transform();
         float x_scale = 100;

         // Draw the timelines
         float total_height = 0;
         float width = 1200.0;
         AllegroFlare::Placement2D placement;
         ALLEGRO_COLOR pinline_color{0, 0, 0, 0.35};
         for (auto &parameter_view : parameter_views)
         {
            // Update render
            parameter_view.set_x_scale(x_scale); // TODO: Figure out how to quantify pixels per second
            parameter_view.set_time_scale(timeline_time_scale);
            parameter_view.set_start_x(timeline_start_position);

            placement.start_transform();
            al_draw_line(0, 0, width, 0, pinline_color, 1.0);
            parameter_view.render();
            placement.restore_transform();
            placement.position.y += parameter_view.get_height();
         }
         al_draw_line(0, 0, width, 0, pinline_color, 1.0);
         total_height = placement.position.y;

         // Draw the playhead
         float playhead_spacial_pos = playhead * x_scale * timeline_time_scale
                                    - timeline_start_position * timeline_time_scale * x_scale;
         al_draw_line(playhead_spacial_pos, -10, playhead_spacial_pos, total_height+10, ALLEGRO_COLOR{1, 1, 1, 1}, 1.0);
        
         timeline_placement.restore_transform();
      }
      return;
    body_dependency_symbols:
      - al_draw_line
      - AllegroFlare::Placement2D


  - name: toggle_timeline_visibility
    body: |
      if (timeline_overlay_visible) timeline_overlay_visible = false;
      else timeline_overlay_visible = true;
      return;


  - name: move_timeline_start_position
    parameters:
      - name: delta
        type: float
        default_argument: 0.0f
    body: |
      float new_position = timeline_start_position + delta;

      if (new_position < 0.0f)
         new_position = 0.0f;
      else if (new_position > playhead_max)
         new_position = playhead_max;

      set_timeline_start_position(new_position);
      return;


  - name: modify_timeline_time_scale
    parameters:
      - name: delta
        type: float
        default_argument: 0.0f
    body: |
      float new_position = timeline_time_scale + delta;

      if (new_position < 0.0f)
         new_position = 0.125f;
      else if (new_position > playhead_max)
         new_position = playhead_max;

      set_timeline_time_scale(new_position);
      return;


  - name: toggle_playback
    body: |
      if (playing) playing = false;
      else playing = true;


  - name: update_playback
    body: |
      // TODO: pass in time duration (do later)
      if (playing) playhead += 1.0 * playback_speed;

      for (auto &parameter : parameters)
      {
         //if (parameter.name == "spin")
         //{
            parameter.assign_to_time(playhead); // DEVELOPMENT
         //}
         //parameter.assign_to_time(playhead);
      }
      return;


  - name: set_playhead_position
    parameters:
      - name: playhead_position
        type: float
        default_argument: 0.0f
    body: |
      playhead = playhead_position;
      return;


  - name: move_playhead
    parameters:
      - name: delta
        type: float
        default_argument: 0.0f
    body: |
      float new_position = playhead + delta;

      if (new_position < 0.0f)
         new_position = 0.0f;
      else if (new_position > playhead_max)
         new_position = playhead_max;

      set_playhead_position(new_position);
      return;


  - name: move_keyframe_value
    parameters:
      - name: delta
        type: float
        default_argument: 0.0f
    body: |
      parameter_views[parameter_view_idx].move_keyframe_value(delta);
      return;


  - name: move_keyframe_time
    parameters:
      - name: delta
        type: float
        default_argument: 0.0f
    body: |
      parameter_views[parameter_view_idx].move_keyframe_time(delta);
      return;


  - name: next_keyframe
    body: |
      parameter_views[parameter_view_idx].next_keyframe();
      return;


  - name: previous_keyframe
    body: |
      parameter_views[parameter_view_idx].previous_keyframe();
      return;


  - name: add_keyframe
    body: |
      parameter_views[parameter_view_idx].add_keyframe(playhead, 0.0, {});
      return;


  - name: remove_keyframe
    body: |
      parameter_views[parameter_view_idx].remove_keyframe_at_focused_keyframe_idx();
      return;


  - name: next_parameter_view
    body: |
      int total = static_cast<int>(parameter_views.size());
      if (total == 0)
         return;

      int start_idx = parameter_view_idx;

      parameter_views[parameter_view_idx].set_as_unfocused();

      do
      {
         parameter_view_idx++;
         if (parameter_view_idx >= total)
         {
            if (wrap_parameter_view_idx_change)
               parameter_view_idx = 0;
            else
            {
               parameter_view_idx = total - 1;
               break;
            }
         }
      }
      while (parameter_views[parameter_view_idx].hidden && parameter_view_idx != start_idx);

      parameter_views[parameter_view_idx].set_as_focused();
      return;


  - name: previous_parameter_view
    body: |
      int total = static_cast<int>(parameter_views.size());
      if (total == 0)
         return;

      int start_idx = parameter_view_idx;

      parameter_views[parameter_view_idx].set_as_unfocused();

      do
      {
         parameter_view_idx--;
         if (parameter_view_idx < 0)
         {
            if (wrap_parameter_view_idx_change)
               parameter_view_idx = total - 1;
            else
            {
               parameter_view_idx = 0;
               break;
            }
         }
      }
      while (parameter_views[parameter_view_idx].hidden && parameter_view_idx != start_idx);

      parameter_views[parameter_view_idx].set_as_focused();
      return;


  - name: on_key_down
    parameters:
      - name: event
        type: ALLEGRO_EVENT*
        default_argument: nullptr
    xguards: [ current_camera, event, (event->type == ALLEGRO_EVENT_KEY_DOWN) ]
    body: |
      bool shift = event->keyboard.modifiers & ALLEGRO_KEYMOD_SHIFT;
      bool ctrl = event->keyboard.modifiers & ALLEGRO_KEYMOD_CTRL;
      bool alt = event->keyboard.modifiers & ALLEGRO_KEYMOD_ALT;
      bool command = event->keyboard.modifiers & ALLEGRO_KEYMOD_COMMAND;

      constexpr auto SHIFT = AllegroFlare::KeyboardCommandMapper::SHIFT;
      constexpr auto CTRL = AllegroFlare::KeyboardCommandMapper::CTRL;
      constexpr auto COMMAND = AllegroFlare::KeyboardCommandMapper::COMMAND;
      constexpr auto OPTION = AllegroFlare::KeyboardCommandMapper::OPTION;

      AllegroFlare::KeyboardCommandMapper mapper;

      // Define mappings
      mapper.set_mapping(ALLEGRO_KEY_SPACE, 0, { "toggle_playback" });
      mapper.set_mapping(ALLEGRO_KEY_N, SHIFT, { "next_parameter_view" });
      mapper.set_mapping(ALLEGRO_KEY_P, SHIFT, { "previous_parameter_view" });
      mapper.set_mapping(ALLEGRO_KEY_1, COMMAND, { "move_playhead_fine_left" });
      mapper.set_mapping(ALLEGRO_KEY_2, COMMAND, { "move_playhead_fine_right" });
      mapper.set_mapping(ALLEGRO_KEY_3, COMMAND, { "move_playhead_macro_left" });
      mapper.set_mapping(ALLEGRO_KEY_4, COMMAND, { "move_playhead_macro_right" });
      mapper.set_mapping(ALLEGRO_KEY_5, COMMAND, { "move_keyframe_time_back" });
      mapper.set_mapping(ALLEGRO_KEY_6, COMMAND, { "move_keyframe_time_forward" });
      mapper.set_mapping(ALLEGRO_KEY_7, COMMAND, { "move_keyframe_value_up" });
      mapper.set_mapping(ALLEGRO_KEY_8, COMMAND, { "move_keyframe_value_down" });
      mapper.set_mapping(ALLEGRO_KEY_A, 0, { "add_keyframe" });
      mapper.set_mapping(ALLEGRO_KEY_N, 0, { "next_keyframe" });
      mapper.set_mapping(ALLEGRO_KEY_P, 0, { "previous_keyframe" });
      mapper.set_mapping(ALLEGRO_KEY_X, 0, { "remove_keyframe" });
      mapper.set_mapping(ALLEGRO_KEY_H, 0, { "toggle_timeline_visibility" });
      mapper.set_mapping(ALLEGRO_KEY_X, 0, { "dump_json_to_cout" });
      mapper.set_mapping(ALLEGRO_KEY_PAD_4, 0, { "move_timeline_start_position_forward" });
      mapper.set_mapping(ALLEGRO_KEY_PAD_6, 0, { "move_timeline_start_position_backward" });
      mapper.set_mapping(ALLEGRO_KEY_PAD_8, 0, { "increase_timeline_time_scale" });
      mapper.set_mapping(ALLEGRO_KEY_PAD_2, 0, { "decrease_timeline_time_scale" });


      // Obtain commands from the current key input
      std::vector<std::string> commands = mapper.get_mapping(event->keyboard.keycode, shift, ctrl, alt, command);

 
      // Find commands and execute the correlated program logic
      for (auto &command : commands)
      {
         if (command.empty()) continue;

         else if (command == "toggle_playback") toggle_playback();

         else if (command == "next_parameter_view") next_parameter_view();
         else if (command == "previous_parameter_view") previous_parameter_view();

         else if (command == "move_playhead_fine_left") move_playhead(-playhead_movement_fine);
         else if (command == "move_playhead_fine_right") move_playhead(playhead_movement_fine);
         else if (command == "move_playhead_macro_left") move_playhead(-playhead_movement_macro);
         else if (command == "move_playhead_macro_right") move_playhead(playhead_movement_macro);
         else if (command == "move_keyframe_value_up") move_keyframe_value(0.1);
         else if (command == "move_keyframe_value_down") move_keyframe_value(-0.1);
         else if (command == "move_keyframe_time_back") move_keyframe_time(-0.1);
         else if (command == "move_keyframe_time_forward") move_keyframe_time(0.1);

         else if (command == "next_keyframe") next_keyframe();
         else if (command == "add_keyframe") add_keyframe();
         else if (command == "remove_keyframe") remove_keyframe();
         else if (command == "previous_keyframe") previous_keyframe();
         else if (command == "toggle_timeline_visibility") toggle_timeline_visibility();
         else if (command == "dump_json_to_cout") std::cout << build_json_dump() << std::endl;
         else if (command == "move_timeline_start_position_forward") move_timeline_start_position(0.25);
         else if (command == "move_timeline_start_position_backward") move_timeline_start_position(-0.25);
         else if (command == "increase_timeline_time_scale") modify_timeline_time_scale(0.06125);
         else if (command == "decrease_timeline_time_scale") modify_timeline_time_scale(-0.06125);
         //else if (command == "increase_timeline_scale") move_timeline_start_position(0.25);
         //else if (command == "decrease_timeline_scale") move_timeline_start_position(-0.25);
      //mapper.set_mapping(ALLEGRO_KEY_PAD_8, 0, { "increase_timeline_time_scale" });
      //mapper.set_mapping(ALLEGRO_KEY_PAD_2, 0, { "decrease_timeline_time_scale" });

         else
         {
            throw std::runtime_error("missinasdnh89sdh89fhsg");
         }
      }





      /*
      mapper.set_mapping(ALLEGRO_KEY_W, 0, { "position_z_minus" });
      mapper.set_mapping(ALLEGRO_KEY_S, 0, { "position_z_plus" });
      mapper.set_mapping(ALLEGRO_KEY_A, 0, { "position_x_minus" });
      mapper.set_mapping(ALLEGRO_KEY_D, 0, { "position_x_plus" });
      mapper.set_mapping(ALLEGRO_KEY_C, 0, { "position_y_minus" });
      mapper.set_mapping(ALLEGRO_KEY_E, 0, { "position_y_plus" });

      mapper.set_mapping(ALLEGRO_KEY_UP, 0, { "up" });
      mapper.set_mapping(ALLEGRO_KEY_DOWN, 0, { "down" });
      mapper.set_mapping(ALLEGRO_KEY_LEFT, 0, { "left" });
      mapper.set_mapping(ALLEGRO_KEY_RIGHT, 0, { "right" });

      mapper.set_mapping(ALLEGRO_KEY_1, COMMAND, { "dial_1_left" });
      mapper.set_mapping(ALLEGRO_KEY_2, COMMAND, { "dial_1_right" });
      mapper.set_mapping(ALLEGRO_KEY_3, COMMAND, { "dial_2_left" });
      mapper.set_mapping(ALLEGRO_KEY_4, COMMAND, { "dial_2_right" });
      mapper.set_mapping(ALLEGRO_KEY_5, COMMAND, { "dial_3_left" });
      mapper.set_mapping(ALLEGRO_KEY_6, COMMAND, { "dial_3_right" });
      mapper.set_mapping(ALLEGRO_KEY_7, COMMAND, { "dial_4_left" });
      mapper.set_mapping(ALLEGRO_KEY_8, COMMAND, { "dial_4_right" });


      float dial_increment = 1.0 / 32;


      std::vector<std::string> commands = mapper.get_mapping(event->keyboard.keycode, shift, ctrl, alt, command);


      for (auto &command : commands)
      {
         if (command.empty()) continue;

         else if (command == "position_x_plus") current_camera->position.x += 0.25;
         else if (command == "position_x_minus") current_camera->position.x -= 0.25;
         else if (command == "position_y_plus") current_camera->position.y += 0.25;
         else if (command == "position_y_minus") current_camera->position.y -= 0.25;
         else if (command == "position_z_plus") current_camera->position.z += 0.25;
         else if (command == "position_z_minus") current_camera->position.z -= 0.25;

         else if (command == "right") current_camera->stepout.x += 0.25;
         else if (command == "left") current_camera->stepout.x -= 0.25;
         else if (command == "up") current_camera->stepout.y += 0.25;
         else if (command == "down") current_camera->stepout.y -= 0.25;

         else if (command == "dial_1_left") current_camera->spin -= dial_increment;
         else if (command == "dial_1_right") current_camera->spin += dial_increment;
         else if (command == "dial_2_left") current_camera->tilt -= dial_increment;
         else if (command == "dial_2_right") current_camera->tilt += dial_increment;
         else if (command == "dial_3_left") current_camera->zoom -= 0.125;
         else if (command == "dial_3_right") current_camera->zoom += 0.125;
         else if (command == "dial_4_left") current_camera->stepout.z -= 1.0;
         else if (command == "dial_4_right") current_camera->stepout.z += 1.0;

         else
         {
            throw std::runtime_error("missinasdnh89sdh89fhsg");
         }
      }
      */
      
      return;
    body_dependency_symbols:
      - AllegroFlare::KeyboardCommandMapper


  - name: build_parameter_views_for_parameters
    type: std::vector<Timeline::ParameterView>
    parameters:
      - name: font_bin
        type: AllegroFlare::FontBin*
        default_argument: nullptr
      - name: p
        type: std::vector<Timeline::Parameter>*
        default_argument: nullptr
      - name: height
        type: float
        default_argument: Timeline::ParameterView::DEFAULT_HEIGHT
    guards: [ font_bin ]
    body: |
       std::vector<Timeline::ParameterView> result;
       int x = 400;
       int y = 100;
       //int yd = 100;
       int i = 0;
       //float height = Timeline::ParameterView::DEFAULT_HEIGHT;
       //int yd = height;
       for (auto &pp : *p)
       {
          result.push_back(Timeline::ParameterView(font_bin, pp.name, &pp)); // HERE
          result.back().set_height(height);
          i++;
       }
       return result;


  - name: build_json_dump
    type: std::string
    body: |
      nlohmann::json j;
      j["parameters"] = parameters;
      return j.dump(2);
    body_dependency_symbols:
      - nlohmann::json
      - Timeline::JSONLoaders::Timeline::Parameter


  - name: build_json
    type: nlohmann::json
    body: |
      nlohmann::json j;
      j["parameters"] = parameters;
      return j;
    body_dependency_symbols:
      - nlohmann::json
      - Timeline::JSONLoaders::Timeline::Parameter


  - name: load_json
    parameters:
      - name: json_string
        type: std::string
        default_argument: '"[unset-json_string]"'
    body: |
      nlohmann::json j = nlohmann::json::parse(json_string); // TODO: Consider moving this into a TRY block (later)

      if (j.contains("parameters") && j["parameters"].is_array())
      {
         // Set all the cameras to the camera values in the JSON array
         parameters = j["parameters"].get<std::vector<Timeline::Parameter>>();

         // Output some debugging info
         bool output_debug_info = false;
         if (output_debug_info)
         {
            std::cout << "- " << std::endl;
            for (int i=0; i<parameters.size(); i++)
            {
               std::cout << " parameter " << i << ": " << std::endl;
               std::cout << "       name: \"" << parameters[i].name << "\"" << std::endl;
            }
         }

         // Refresh the interface
         // TODO: HERE
      }
      else
      {
         throw std::runtime_error("Expected key \"parameters\" with an array value in JSON");
      }

      return;
    body_dependency_symbols:
      - nlohmann::json
      - Timeline::JSONLoaders::Timeline::Parameter


dependencies:


  - symbol: Timeline::Parameter
    headers: [ Timeline/Parameter.hpp ]
  - symbol: Timeline::ParameterView
    headers: [ Timeline/ParameterView.hpp ]
  - symbol: AllegroFlare::KeyboardCommandMapper
    headers: [ AllegroFlare/KeyboardCommandMapper.hpp ]
  - symbol: ALLEGRO_EVENT
    headers: [ allegro5/allegro.h ]
  - symbol: AllegroFlare::Placement2D
    headers: [ AllegroFlare/Placement2D.hpp ]
  - symbol: al_draw_line
    headers: [ allegro5/allegro_primitives.h ]
  - symbol: nlohmann::json
    headers: [ lib/nlohmann/json.hpp ]
  - symbol: Timeline::JSONLoaders::Timeline::Parameter
    headers: [ Timeline/JSONLoaders/Timeline/Parameter.hpp ]
  - symbol: AllegroFlare::JSONLoaders::AllegroFlare::Camera3D
    headers: [ AllegroFlare/JSONLoaders/AllegroFlare/Camera3D.hpp ]
  - symbol: AllegroFlare::FontBin
    headers: [ AllegroFlare/FontBin.hpp ]


