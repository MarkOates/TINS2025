parent_classes:


  - class: AllegroFlare::Screens::Gameplay
    scope: public
    init_with: ''


properties:


  - name: data_folder_path
    type: std::string
    init_with: DEFAULT_DATA_FOLDER_PATH
    getter: true
    setter: before_initialized

  - name: asset_studio_database
    type: AllegroFlare::AssetStudio::Database*
    init_with: nullptr
    getter_ref: true
    setter: before_initialized

  - name: event_emitter
    type: AllegroFlare::EventEmitter*
    init_with: nullptr
    setter: before_initialized
    getter: true

  - name: bitmap_bin
    type: AllegroFlare::BitmapBin*
    init_with: nullptr
    setter: before_initialized

  - name: font_bin
    type: AllegroFlare::FontBin*
    init_with: nullptr
    setter: before_initialized

  - name: model_bin
    type: AllegroFlare::ModelBin*
    init_with: nullptr
    setter: before_initialized

  - name: dialog_system
    type: AllegroFlare::DialogSystem::DialogSystem*
    init_with: nullptr
    getter: true
    setter: before_initialized

  - name: current_level_identifier
    type: std::string
    init_with: '"[unset-current_level]"'

  - name: current_level
    type: TINS2025::Gameplay::Level*
    init_with: nullptr

  - name: collision_observer
    type: AllegroFlare::CollisionObservers::Simple
    init_with: '{}'

  - name: collision_tile_map
    type: AllegroFlare::TileMaps::TileMap<int>
    init_with: '{}'

  - name: entities
    type: std::vector<TINS2025::Entity>
    init_with: '{}'

  - name: player_entity
    type: TINS2025::Entity*
    init_with: nullptr

  - name: initialized
    type: bool
    init_with: false
    getter: true

  - name: DEFAULT_DATA_FOLDER_PATH
    type: char*
    init_with: '(char*)"[unset-data_folder_path]"'
    static: true
    constexpr: true

  - name: TYPE
    type: char*
    init_with: '(char*)"TINS2025/Gameplay/Screen"'
    static: true
    constexpr: true


methods:


  - name: initialize
    guards:
      - (!initialized)
      - al_is_system_installed()
      - al_is_primitives_addon_initialized()
      - al_is_font_addon_initialized()
      - event_emitter
      - bitmap_bin
      - font_bin
      - model_bin
      - dialog_system
    body: |
      set_update_strategy(AllegroFlare::Screens::Base::UpdateStrategy::SEPARATE_UPDATE_AND_RENDER_FUNCS);
      load_up_world();
      initialized = true;
      return;
    body_dependency_symbols:
      - al_is_primitives_addon_initialized


  - name: gameplay_suspend_func
    virtual: true
    override: true
    body: |
      // Function that is called immediately after the gameplay is suspended.
      //AllegroFlare::Logger::warn_from_once(
         //"AllegroFlare::Screens::Gameplay::gameplay_suspend_func",
         //"Not implemented in the base class. This method should be implemented in the derived class. Take into account "
            //"the AllegroFlare/Screens/Gameplay class has a suspend_gameplay func"
      //);
      return;


  - name: gameplay_resume_func
    virtual: true
    override: true
    body: |
      // Function that is called immediately after the gameplay is resumed.
      //AllegroFlare::Logger::warn_from_once(
         //"AllegroFlare::Screens::Gameplay::gameplay_suspend_func",
         //"Not implemented in the base class. This method should be implemented in the derived class. Take into account "
            //"the AllegroFlare/Screens/Gameplay class has a resume_gameplay func"
      //);
      return;


  - name: load_up_world
    body: |
      collision_observer.clear();

      // Setup the tile map
      collision_tile_map.resize(100, 100);
      collision_tile_map.initialize();
      //collision_tile_map.set_tile(69, 34, 1);


      // Setup the entities
      entities.reserve(256);

      Entity e;
      e.aabb2d.set_x(1920/2);
      e.aabb2d.set_y(1080/2);
      e.aabb2d.set_w(40);
      e.aabb2d.set_h(20);
      e.sprite = bitmap_bin->auto_get("character-012.png");
      e.flags |= TINS2025::Entity::FLAG_COLLIDES_WITH_TILEMAP;
      entities.push_back(e);

      player_entity = &entities.back();

      {
         Entity e;
         e.aabb2d.set_x(1920/2 + 200);
         e.aabb2d.set_y(1080/2);
         e.aabb2d.set_w(20);
         e.aabb2d.set_h(10);
         e.flags |= TINS2025::Entity::FLAG_COLLIDES_WITH_PLAYER;
         entities.push_back(e);
      }


      // Setup the dialog
      dialog_system->set_dialog_node_bank(build_dialog_node_bank());
      //dialog_system->set_standard_dialog_box_font_name("MavenPro-Medium.ttf");
      //dialog_system->set_standard_dialog_box_font_size(-52);
      //dialog_system->set_standard_dialog_box_font_line_height(-52); // TODO: Add this feature
      //dialog_system->set_standard_dialog_box_width(1920 * 0.6);
      //dialog_system->set_standard_dialog_box_height(248);
      dialog_system->set_standard_dialog_box_y(1080/5*4+60);


      return;


  - name: load_level_by_identifier
    type: bool
    virtual: true
    override: true
    parameters:
      - name: level_identifier
        type: std::string
        default_argument: '"[unset-level_identifier]"'
    body: |
      return false;
    body_dependency_symbols:
     - TINS2025::Gameplay::Level


  - name: on_activate
    virtual: true
    override: true
    guards: [ initialized ]
    body: |
      //emit_event_to_update_input_hints_bar();
      //emit_show_and_size_input_hints_bar_event();
      return;


  - name: on_deactivate
    virtual: true
    override: true
    guards: [ initialized ]
    body: |
      //emit_hide_and_restore_size_input_hints_bar_event();
      return;


  - name: update
    body: |
      if (!get_gameplay_suspended())
      {
         // Observe aabb2d <-> tile steps
         AllegroFlare::Physics::TileMapCollisionStepper tile_map_collision_stepper(
            &collision_tile_map,
            nullptr,
            16.0f,
            16.0f
         );
         for (auto &entity : entities)
         {
            if ((entity.flags & TINS2025::Entity::FLAG_COLLIDES_WITH_TILEMAP) == 0) continue;
            tile_map_collision_stepper.set_aabb2d(&entity.aabb2d);
            tile_map_collision_stepper.step();
         }

         // Observe changes in bounding box collisions
         collision_observer.set_subject(player_entity);
         std::set<void*> collidables;
         for (auto &entity : entities)
         {
            if (entity.flags & TINS2025::Entity::FLAG_COLLIDES_WITH_PLAYER) collidables.insert((void*)&entity);
         }
         collision_observer.set_collidables(collidables);
         collision_observer.set_on_test_collide([](void* subject_v, void* collidable_v) -> bool {
            TINS2025::Entity &subject = *static_cast<TINS2025::Entity*>(subject_v);
            TINS2025::Entity &collidable = *static_cast<TINS2025::Entity*>(collidable_v);

            return (subject.aabb2d.collides(&collidable.aabb2d));
         });

         collision_observer.process();

         for (auto &entered : collision_observer.get_entered())
         {
            TINS2025::Entity &collidable = *static_cast<TINS2025::Entity*>(entered);
            collidable.flags |= TINS2025::Entity::FLAG_HIDDEN;
            event_emitter->emit_activate_dialog_node_by_name_event("pickup_apple");
            //event_emitter->emit_activate_dialog_node_by_name_event("alfred_questioning");
         }
      }

      return;
    body_dependency_symbols:
      - AllegroFlare::Physics::TileMapCollisionStepper


  - name: render
    body: |
      DEVELOPMENT__render_tile_map();

      for (auto &entity : entities)
      {
         if ((entity.flags & TINS2025::Entity::FLAG_HIDDEN) == 0) entity.draw();
      }

      //DEVELOPMENT__render_tile_map();
      
      //ALLEGRO_FONT *font = obtain_font();
      //al_draw_text(font, ALLEGRO_COLOR{1, 1, 1, 1}, 1920/2, 1080/2 - 30, ALLEGRO_ALIGN_CENTER, "Hello");
      return;


  - name: game_event_func
    virtual: true
    override: true
    parameters:
      - name: game_event
        type: AllegroFlare::GameEvent*
        default_argument: nullptr
    guards: [ game_event ]
    body: |
      return;


  - name: primary_update_func
    virtual: true
    override: true
    parameters:
      - name: time_now
        type: double
        default_argument: 0.0f
      - name: delta_time
        type: double
        default_argument: 1.0f
    guards: [ initialized ]
    body: |
      // Update stuff here (take into account delta_time)
      //player_entity->aabb2d.set_velocity_x(player_entity->aabb2d.get_x() + 1.0);
      player_entity->aabb2d.set_velocity_x(2.0);

      update();
      return;


  - name: primary_render_func
    virtual: true
    override: true
    guards: [ initialized ]
    body: |
      // Render stuff here
      render();
      return;



  - name: virtual_control_button_up_func
    virtual: true
    override: true
    parameters:
      - name: player
        type: AllegroFlare::Player*
        default_argument: nullptr
      - name: virtual_controller
        type: AllegroFlare::VirtualControllers::Base*
        default_argument: nullptr
      - name: virtual_controller_button_num
        type: int
        default_argument: 0
      - name: is_repeat
        type: bool
        default_argument: false
    guards: [ initialized ]
    body: |
      // TODO: this function
      return;


  - name: virtual_control_button_down_func
    virtual: true
    override: true
    parameters:
      - name: player
        type: AllegroFlare::Player*
        default_argument: nullptr
      - name: virtual_controller
        type: AllegroFlare::VirtualControllers::Base*
        default_argument: nullptr
      - name: virtual_controller_button_num
        type: int
        default_argument: 0
      - name: is_repeat
        type: bool
        default_argument: false
    guards: [ initialized ]
    body: |
      // TODO: this function
      using namespace AllegroFlare;
      //if (!is_processing_user_input()) return;

      if (virtual_controller_button_num == VirtualControllers::GenericController::BUTTON_RIGHT)
      {
         //player_velocity.x = 1;
         //chapter_select_element.rotate_carousel_right();
      }
      if (virtual_controller_button_num == VirtualControllers::GenericController::BUTTON_LEFT)
      {
         //player_velocity.x = -1;
         //chapter_select_element.rotate_carousel_left();
      }
      if (virtual_controller_button_num == VirtualControllers::GenericController::BUTTON_A
         || virtual_controller_button_num == VirtualControllers::GenericController::BUTTON_MENU
         )
      {
         //select_menu_option();
      }
      if (virtual_controller_button_num == VirtualControllers::GenericController::BUTTON_X)
      {
         //exit_screen();
      }
      //call_on_finished_callback_func(); // Consider technique to exit
      return;
    body_dependency_symbols:
      - AllegroFlare::VirtualControllers::GenericController


  - name: virtual_control_axis_change_func
    virtual: true
    override: true
    parameters:
      - name: ev
        type: ALLEGRO_EVENT*
        default_argument: nullptr
    guards: [ initialized ]
    body: |
      // TODO: this function
      return;


  - name: obtain_font
    type: ALLEGRO_FONT*
    guards: [ font_bin ]
    body: |
      return font_bin->auto_get("Inter-Regular.ttf -32");


  - name: DEVELOPMENT__render_tile_map
    body: |
      AllegroFlare::TileMaps::TileMap<int> &tile_map = collision_tile_map;
      float tile_width=16.0f;
      float tile_height=16.0f;

      for (int y=0; y<tile_map.get_num_rows(); y++)
      {
         for (int x=0; x<tile_map.get_num_columns(); x++)
         {
            int tile_type = tile_map.get_tile(x, y);
            switch(tile_type)
            {
               case 0:
                 //al_draw_rectangle(x * tile_width, y * tile_height, (x+1) * tile_width, (y+1) * tile_height, 
                    //ALLEGRO_COLOR{0.2, 0.2, 0.21, 0.21}, 1.0);
               break;

               case 1:
                 al_draw_filled_rectangle(x * tile_width, y * tile_height, (x+1) * tile_width, (y+1) * tile_height, 
                    ALLEGRO_COLOR{0.65, 0.62, 0.6, 1.0});
               break;

               default:
                 //al_draw_filled_rectangle(x * tile_width, y * tile_height, (x+1) * tile_width, (y+1) * tile_height, 
                    //ALLEGRO_COLOR{0.8, 0.32, 0.4, 1.0});
               break;
            }
         }
      }
      return;


  - name: build_dialog_node_bank
    static: true
    type: AllegroFlare::DialogTree::NodeBank
    body: |
      AllegroFlare::DialogTree::NodeBank result;

      std::string LOLLIE = "Lollie";

      result.set_nodes({
         { "pickup_apple", new AllegroFlare::DialogTree::Nodes::MultipageWithOptions(
               LOLLIE,
               {
                  "This is perfect! I just found an essential ingredient for our party!"
               },
               {
                  { "Exit", new AllegroFlare::DialogTree::NodeOptions::ExitDialog(), 0 }
               }
            )
         },
      });

      return result;
    body_dependency_symbols:
      - AllegroFlare::DialogTree::Nodes::MultipageWithOptions
      - AllegroFlare::DialogTree::NodeOptions::ExitDialog
      - AllegroFlare::DialogTree::NodeOptions::GoToNode


dependencies:


  - symbol: ALLEGRO_FONT
    headers: [ allegro5/allegro.h ]
  - symbol: ALLEGRO_EVENT
    headers: [ allegro5/allegro.h ]
  - symbol: AllegroFlare::Screens::Gameplay
    headers: [ AllegroFlare/Screens/Gameplay.hpp ]
  - symbol: AllegroFlare::BitmapBin
    headers: [ AllegroFlare/BitmapBin.hpp ]
  - symbol: AllegroFlare::EventEmitter
    headers: [ AllegroFlare/EventEmitter.hpp ]
  - symbol: AllegroFlare::FontBin
    headers: [ AllegroFlare/FontBin.hpp ]
  - symbol: AllegroFlare::ModelBin
    headers: [ AllegroFlare/ModelBin.hpp ]
  - symbol: al_is_primitives_addon_initialized
    headers: [ allegro5/allegro_primitives.h ]
  - symbol: AllegroFlare::Player
    headers: [ AllegroFlare/Player.hpp ]
  - symbol: AllegroFlare::VirtualControllers::Base
    headers: [ AllegroFlare/VirtualControllers/Base.hpp ]
  - symbol: AllegroFlare::VirtualControllers::GenericController
    headers: [ AllegroFlare/VirtualControllers/GenericController.hpp ]
  - symbol: TINS2025::Gameplay::Screen
    headers: [ TINS2025/Gameplay/Screen.hpp ]
  - symbol: TINS2025::Gameplay::Level
    headers: [ TINS2025/Gameplay/Level.hpp ]
  - symbol: AllegroFlare::GameEvent
    headers: [ AllegroFlare/GameEvent.hpp ]
  - symbol: AllegroFlare::AssetStudio::Database
    headers: [ AllegroFlare/AssetStudio/Database.hpp ]
  - symbol: AllegroFlare::CollisionObservers::Simple
    headers: [ AllegroFlare/CollisionObservers/Simple.hpp ]
  - symbol: TINS2025::Entity
    headers: [ TINS2025/Entity.hpp ]
  - symbol: AllegroFlare::TileMaps::TileMap
    headers: [ AllegroFlare/TileMaps/TileMap.hpp ]
  - symbol: AllegroFlare::Physics::TileMapCollisionStepper
    headers: [ AllegroFlare/Physics/TileMapCollisionStepper.hpp ]
  - symbol: AllegroFlare::DialogSystem::DialogSystem
    headers: [ AllegroFlare/DialogSystem/DialogSystem.hpp ]
  - symbol: AllegroFlare::DialogTree::Nodes::MultipageWithOptions
    headers: [ AllegroFlare/DialogTree/Nodes/MultipageWithOptions.hpp ]
  - symbol: AllegroFlare::DialogTree::NodeOptions::ExitDialog
    headers: [ AllegroFlare/DialogTree/NodeOptions/ExitDialog.hpp ]
  - symbol: AllegroFlare::DialogTree::NodeOptions::GoToNode
    headers: [ AllegroFlare/DialogTree/NodeOptions/GoToNode.hpp ]
  - symbol: AllegroFlare::DialogTree::NodeBank
    headers: [ AllegroFlare/DialogTree/NodeBank.hpp ]


